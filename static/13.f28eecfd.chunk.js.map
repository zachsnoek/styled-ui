{"version":3,"sources":["webpack:///static/13.f28eecfd.chunk.js","webpack:///./catalog/row-masonry/documentation.md?441b","webpack:///./catalog/row-masonry/documentation.md"],"names":["webpackJsonp","2132","module","exports","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__","2207"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,EAASC,GCF7B,GAAIC,GAAQ,EAAQ,GAChBC,EAAmB,EAAQ,IAC3BC,EAAe,EAAQ,KAAWA,YAClCA,GAAaC,aACfD,EAAeA,EAAaE,QAE9B,IAAIC,GAAsBJ,GACxBK,YAAa,sBACbC,gBAAiB,WACf,OAAQC,QAAS,EAAQ,QAE3BC,mBAAoB,aAUpBC,OAAQ,WACN,MAAOV,GAAMW,cAAcT,EAAcU,OAAOC,UAAWC,KAAKC,OAAQP,QAASM,KAAKE,MAAMR,aAGhGH,GAAoBY,oBAAqB,EACzCpB,EAAOC,QAAUO,GDUfa,KACA,SAAUrB,EAAQC,GEtCxBD,EAAOC,QAAU","file":"static/13.f28eecfd.chunk.js","sourcesContent":["webpackJsonp([13],{\n\n/***/ 2132:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(0);\n    var createReactClass = __webpack_require__(94);\n    var PageRenderer = __webpack_require__(460).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(2207)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!../../node_modules/raw-loader/index.js!./documentation.md\", function() {\n            component.setState({\n              content: require(\"!!../../node_modules/raw-loader/index.js!./documentation.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ }),\n\n/***/ 2207:\n/***/ (function(module, exports) {\n\nmodule.exports = \"A component for layout out elements in a horizontal masonry style. This layout uses varying row heights to allow multiple elements of varying aspect ratio to align to the width of a container.\\n\\nNOTE: This is a JavaScript-based layout that requires a known container width. It may not be appropriate for uses cases where server-rendered content is required.\\n\\n## Possible polyfill requirements\\n\\nThis component assumes the availability of the following APIs, which may require polyfills in your application:\\n\\n- `ResizeObserver`\\n\\n## Automatic layout for in-memory collections\\n\\n`AutoSizedRowMasonry` is a high-level component that uses a `ResizeObserver` to track the size of the container and automatically handle rendering.\\n\\n```react\\nshowSource: true\\n---\\n<Box maxWidth={400}>\\n\\t<AutoSizedRowMasonry\\n\\t\\titems={new Array(20).fill(true).map(x => ({aspectRatio: (Math.random() + 0.2) * 2 }))}\\n\\t\\tgetItemAspectRatio={x => x.aspectRatio}\\n\\t\\tgapSize={12}\\n\\t\\ttargetRowHeight={100}\\n\\t\\tminRowItems={1}\\n\\t\\tmaxRowItems={4}\\n\\t\\trenderItem={x => (\\n\\t\\t\\t<Box flex={1} backgroundColor=\\\"blue2\\\" />\\n\\t\\t)}\\n\\t/>\\n</Box>\\n```\\n\\nIf you need more flexibility (such as for virtualized rendering), you can use the lower-level components.\\n\\nThe `getRowLayout` function accepts a collection of items and parameters to use in the layout calculation, and returns layout information. Use the layout data to compose `MasonryRow` and `MasonryCell` elements into the final layout.\\n\\n```\\nconst layout =\\n\\tgetRowLayout(items, {\\n\\t\\tgetItemAspectRatio, // function that accepts an item and returns a number representing the item's aspect ratio (width / height)\\n\\t\\twidth: 300, // width of the container in pixels\\n\\t\\tgapWidth: 12, // width of the gap between columns in pixels\\n\\t\\ttargetHeight: 100, // target row height to shoot for, in pixels\\n\\t\\tminRowItems: 1, // minimum number of items per row\\n\\t\\tmaxRowItems: 4, // maximum number of items per row\\n\\t});\\n\\n\\treturn (\\n\\t\\t<Box display=\\\"grid\\\" gridAutoFlow=\\\"row\\\" gridRowGap={12}>\\n\\t\\t\\t{layout.rows.map((row, i) => (\\n\\t\\t\\t\\t\\t<MasonryRow\\n\\t\\t\\t\\t\\t\\tkey={i}\\n\\t\\t\\t\\t\\t\\trow={row}\\n\\t\\t\\t\\t\\t\\trenderCell={({ item, aspectRatio, index }) => (\\n\\t\\t\\t\\t\\t\\t\\t<MasonryCell key={index} aspectRatio={aspectRatio}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Box flex={1}>{item.title}</Box>\\n\\t\\t\\t\\t\\t\\t\\t</MasonryCell>\\n\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t))}\\n\\t\\t</Box>\\n\\t);\\n```\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/13.f28eecfd.chunk.js","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!../../node_modules/raw-loader/index.js!./documentation.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!../../node_modules/raw-loader/index.js!./documentation.md\", function() {\n            component.setState({\n              content: require(\"!!../../node_modules/raw-loader/index.js!./documentation.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./catalog/row-masonry/documentation.md\n// module id = 2132\n// module chunks = 13","module.exports = \"A component for layout out elements in a horizontal masonry style. This layout uses varying row heights to allow multiple elements of varying aspect ratio to align to the width of a container.\\n\\nNOTE: This is a JavaScript-based layout that requires a known container width. It may not be appropriate for uses cases where server-rendered content is required.\\n\\n## Possible polyfill requirements\\n\\nThis component assumes the availability of the following APIs, which may require polyfills in your application:\\n\\n- `ResizeObserver`\\n\\n## Automatic layout for in-memory collections\\n\\n`AutoSizedRowMasonry` is a high-level component that uses a `ResizeObserver` to track the size of the container and automatically handle rendering.\\n\\n```react\\nshowSource: true\\n---\\n<Box maxWidth={400}>\\n\\t<AutoSizedRowMasonry\\n\\t\\titems={new Array(20).fill(true).map(x => ({aspectRatio: (Math.random() + 0.2) * 2 }))}\\n\\t\\tgetItemAspectRatio={x => x.aspectRatio}\\n\\t\\tgapSize={12}\\n\\t\\ttargetRowHeight={100}\\n\\t\\tminRowItems={1}\\n\\t\\tmaxRowItems={4}\\n\\t\\trenderItem={x => (\\n\\t\\t\\t<Box flex={1} backgroundColor=\\\"blue2\\\" />\\n\\t\\t)}\\n\\t/>\\n</Box>\\n```\\n\\nIf you need more flexibility (such as for virtualized rendering), you can use the lower-level components.\\n\\nThe `getRowLayout` function accepts a collection of items and parameters to use in the layout calculation, and returns layout information. Use the layout data to compose `MasonryRow` and `MasonryCell` elements into the final layout.\\n\\n```\\nconst layout =\\n\\tgetRowLayout(items, {\\n\\t\\tgetItemAspectRatio, // function that accepts an item and returns a number representing the item's aspect ratio (width / height)\\n\\t\\twidth: 300, // width of the container in pixels\\n\\t\\tgapWidth: 12, // width of the gap between columns in pixels\\n\\t\\ttargetHeight: 100, // target row height to shoot for, in pixels\\n\\t\\tminRowItems: 1, // minimum number of items per row\\n\\t\\tmaxRowItems: 4, // maximum number of items per row\\n\\t});\\n\\n\\treturn (\\n\\t\\t<Box display=\\\"grid\\\" gridAutoFlow=\\\"row\\\" gridRowGap={12}>\\n\\t\\t\\t{layout.rows.map((row, i) => (\\n\\t\\t\\t\\t\\t<MasonryRow\\n\\t\\t\\t\\t\\t\\tkey={i}\\n\\t\\t\\t\\t\\t\\trow={row}\\n\\t\\t\\t\\t\\t\\trenderCell={({ item, aspectRatio, index }) => (\\n\\t\\t\\t\\t\\t\\t\\t<MasonryCell key={index} aspectRatio={aspectRatio}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<Box flex={1}>{item.title}</Box>\\n\\t\\t\\t\\t\\t\\t\\t</MasonryCell>\\n\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t))}\\n\\t\\t</Box>\\n\\t);\\n```\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./catalog/row-masonry/documentation.md\n// module id = 2207\n// module chunks = 13"],"sourceRoot":""}