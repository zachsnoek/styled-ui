webpackJsonp([13],{2132:function(t,e,n){var o=n(0),a=n(94),i=n(460).PageRenderer;i.__esModule&&(i=i.default);var r=a({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:n(2207)}},componentWillMount:function(){},render:function(){return o.createElement(i,Object.assign({},this.props,{content:this.state.content}))}});r.__catalog_loader__=!0,t.exports=r},2207:function(t,e){t.exports='A component for layout out elements in a horizontal masonry style. This layout uses varying row heights to allow multiple elements of varying aspect ratio to align to the width of a container.\n\nNOTE: This is a JavaScript-based layout that requires a known container width. It may not be appropriate for uses cases where server-rendered content is required.\n\n## Possible polyfill requirements\n\nThis component assumes the availability of the following APIs, which may require polyfills in your application:\n\n- `ResizeObserver`\n\n## Automatic layout for in-memory collections\n\n`AutoSizedRowMasonry` is a high-level component that uses a `ResizeObserver` to track the size of the container and automatically handle rendering.\n\n```react\nshowSource: true\n---\n<Box maxWidth={400}>\n\t<AutoSizedRowMasonry\n\t\titems={new Array(20).fill(true).map(x => ({aspectRatio: (Math.random() + 0.2) * 2 }))}\n\t\tgetItemAspectRatio={x => x.aspectRatio}\n\t\tgapSize={12}\n\t\ttargetRowHeight={100}\n\t\tminRowItems={1}\n\t\tmaxRowItems={4}\n\t\trenderItem={x => (\n\t\t\t<Box flex={1} backgroundColor="blue2" />\n\t\t)}\n\t/>\n</Box>\n```\n\nIf you need more flexibility (such as for virtualized rendering), you can use the lower-level components.\n\nThe `getRowLayout` function accepts a collection of items and parameters to use in the layout calculation, and returns layout information. Use the layout data to compose `MasonryRow` and `MasonryCell` elements into the final layout.\n\n```\nconst layout =\n\tgetRowLayout(items, {\n\t\tgetItemAspectRatio, // function that accepts an item and returns a number representing the item\'s aspect ratio (width / height)\n\t\twidth: 300, // width of the container in pixels\n\t\tgapWidth: 12, // width of the gap between columns in pixels\n\t\ttargetHeight: 100, // target row height to shoot for, in pixels\n\t\tminRowItems: 1, // minimum number of items per row\n\t\tmaxRowItems: 4, // maximum number of items per row\n\t});\n\n\treturn (\n\t\t<Box display="grid" gridAutoFlow="row" gridRowGap={12}>\n\t\t\t{layout.rows.map((row, i) => (\n\t\t\t\t\t<MasonryRow\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\trow={row}\n\t\t\t\t\t\trenderCell={({ item, aspectRatio, index }) => (\n\t\t\t\t\t\t\t<MasonryCell key={index} aspectRatio={aspectRatio}>\n\t\t\t\t\t\t\t\t<Box flex={1}>{item.title}</Box>\n\t\t\t\t\t\t\t</MasonryCell>\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t</Box>\n\t);\n```\n'}});
//# sourceMappingURL=13.f28eecfd.chunk.js.map