webpackJsonp([44],{2195:function(t,e,n){var i=n(0),a=n(94),l=n(460).PageRenderer;l.__esModule&&(l=l.default);var o=a({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:n(2270)}},componentWillMount:function(){},render:function(){return i.createElement(l,Object.assign({},this.props,{content:this.state.content}))}});o.__catalog_loader__=!0,t.exports=o},2270:function(t,e){t.exports='Usage examples\n\n### Row ID\n\nAll data must include an `id` property or `handleGetRowId` must be provided\n\n```react\nshowSource: true\nstate: { data: null }\n---\n<div>\n\t<Button primary medium onClick={() => setState({ data: (state.data && state.data.slice(50)) || censusData.slice(50) })}>Update Data</Button>\n\t<SimpleGrid data={state.data || censusData} maxRows={10} handleGetRowId={data => data.NAME}>\n\t\t<GridColumn displayName="Name" fieldName="value" defaultSort={GridColumn.sortOptions.ascending} />\n\t\t<GridColumn displayName="Population" fieldName="population" isRightAligned />\n\t\t<GridColumn displayName="Net Population Change" fieldName="populationChange" isRightAligned />\n\t\t<GridColumn displayName="Births" fieldName="births" isRightAligned width={100} isLargeViewportOnly />\n\t\t<GridColumn displayName="Deaths" fieldName="deaths" isRightAligned width={100} isSortable={false} isLargeViewportOnly/>\n\t</SimpleGrid>\n</div>\n```\n\n### Interactable Elements in the rows\n\nThe `hasInteractableElement` allows you to use interactable in rows without triggering a row click\n\n```react\nshowSource: true\n---\n<div>\n\t<SimpleGrid data={censusData} maxRows={10} onRowClick={() => alert(\'Click\')}>\n\t\t<GridColumn displayName="Name" fieldName="value" defaultSort={GridColumn.sortOptions.ascending} />\n\t\t<GridColumn displayName="Population" fieldName="population" isRightAligned />\n\t\t<GridColumn displayName="Net Population Change" fieldName="populationChange" isRightAligned />\n\t\t<GridColumn\n\t\t\thasInteractableElement\n\t\t\tdisplayName=""\n\t\t\tfieldName="edit"\n\t\t\twidth={100}\n\t\t\tcellComponent={ ({data}) =>\n\t\t\t\t(<Button primary small onClick={() => console.log(data)}>\n\t\t\t\t\tEdit\n\t\t\t\t</Button>)\n\t\t\t}\n\t\t\tisLargeViewportOnly\n\t\t/>\n\t</SimpleGrid>\n</div>\n```\n\n### Simple Aggregations\n\n```react\nshowSource: true\n---\n<div>\n\t<SimpleGrid data={censusData} maxRows={10}>\n\t\t<SimpleGrid.GroupColumn displayName="Name" fieldName="value" />\n\t\t<GridColumn hide fieldName="areaDesc" groupByColumn width={200} />\n\t\t<GridColumn displayName="Population" fieldName="population" />\n\t\t<GridColumn displayName="Net Population Change" fieldName="populationChange" />\n\t</SimpleGrid>\n</div>\n```\n\n### Simple Text Filtering\n\n```react\nshowSource: true\nstate: { filterText: \'WA\' }\n---\n<div>\n\t<Input placeholder="Search" value={state.filterText} onChange={(e => setState({ filterText: e.target.value }))} />\n\t<SimpleGrid data={censusData} maxRows={10} onRowClick={row => {alert(row.value)}} filterText={state.filterText}>\n\t\t<GridColumn displayName="Name" fieldName="value" defaultSort={GridColumn.sortOptions.ascending} />\n\t\t<GridColumn displayName="Population" fieldName="population" isRightAligned />\n\t\t<GridColumn displayName="Net Population Change" fieldName="populationChange" isRightAligned />\n\t\t<GridColumn displayName="Births" fieldName="births" isRightAligned width={100} isLargeViewportOnly />\n\t\t<GridColumn displayName="Deaths" fieldName="deaths" isRightAligned width={100} isSortable={false} isLargeViewportOnly/>\n\t</SimpleGrid>\n</div>\n```\n\n### Advanced Filtering\n\nSee https://www.ag-grid.com/javascript-grid-filter-provided-simple/#filterOptions for more `type` options\n\n```react\nshowSource: true\nstate: { filter: null }\n---\n<div>\n\t<Button primary medium onClick={() => setState({ filter: { population: { type: \'greaterThan\', filter: \'200000\' } } })}>Pop > 200,000</Button>\n\t<Button primary medium onClick={() => setState({ filter: { population: { type: \'lessThan\', filter: \'200000\' } } })}>{\'Pop < 200,000\'}</Button>\n\t<Button primary medium onClick={() => setState({ filter: null })}>None</Button>\n\t{JSON.stringify(state.filter)}\n\t<SimpleGrid filters={state.filter} data={censusData} maxRows={10} onRowClick={row => {alert(row.value)}} filterText={state.filterText}>\n\t\t<GridColumn displayName="Name" fieldName="value" />\n\t\t<GridColumn displayName="Population" fieldName="population" isRightAligned filter={GridColumn.filterByOptions.number} />\n\t\t<GridColumn displayName="Net Population Change" fieldName="populationChange" isRightAligned />\n\t\t<GridColumn displayName="Births" fieldName="births" isRightAligned width={100} isLargeViewportOnly />\n\t\t<GridColumn displayName="Deaths" fieldName="deaths" isRightAligned width={100} isSortable={false} isLargeViewportOnly/>\n\t</SimpleGrid>\n</div>\n```\n\n### Custom Cell Component\n\nCell components can be any valid react component. The `value` prop will be what the value of the field would be normally.\n\n```react\nshowSource: true\n---\n<div>\n\t<SimpleGrid data={censusData} maxRows={10} onRowClick={row => {alert(row.value)}}>\n\t\t<GridColumn displayName="Name" fieldName="value" defaultSort={GridColumn.sortOptions.ascending} />\n\t\t<GridColumn displayName="Population" fieldName="population" isRightAligned />\n\t\t<GridColumn displayName="Net Population Change" fieldName="populationChange" cellComponent={PopulationChange} isRightAligned />\n\t\t<GridColumn displayName="Births" fieldName="births" isRightAligned width={100} isLargeViewportOnly />\n\t\t<GridColumn displayName="Deaths" fieldName="deaths" isRightAligned width={100} isSortable={false} isLargeViewportOnly/>\n\t</SimpleGrid>\n</div>\n```\n\n```code\nlang: js\n---\nfunction PopulationChange({ value }) {\n\treturn (\n\t\t<div style={{ color: value >= 0 ? \'green\' : \'red\' }}>\n\t\t\t{`${value >= 0 ? \'+\' : \'-\'} ${Math.abs(value)}`}\n\t\t</div>\n\t);\n}\n```\n\n### Drag and Drop\n\nThis example uses the TreeGrid, but SimpleGrid supports it as well.\n\n```react\nshowSource: true\nstate: { }\n---\n<div>\n\t<TreeGrid\n\t\tdata={state.data || censusDataFolders}\n\t\tmaxRows={10}\n\t\tautoGroupExpansion={TreeGrid.expandedRowsOptions.topLevel}\n\t\tonDataChange={data => setState({ data })}\n\t\tenableDragDrop\n\t>\n\t\t<TreeGrid.GroupColumn displayName="Name" width={500} />\n\t\t<GridColumn displayName="Population" fieldName="population" />\n\t\t<GridColumn displayName="Net Population Change" fieldName="populationChange" />\n\t</TreeGrid>\n</div>\n```\n\n### Checkbox Selection\n\nAlso supported by Paginated and TreeGrid.\n\nRef handles available when using checkboxes are `selectAllRows`, `selectFilteredRows`, `deselectAllRows`, and `deselectFilteredRows`.\n\n```react\nshowSource: true\nstate: { selected: false }\n---\n<div>\n\t<Button\n\t\tprimary\n\t\tmedium\n\t\tonClick={() => {\n\t\t\t!state.selected ?\n\t\t\t\tgridRef.current.selectAllRows() :\n\t\t\t\tgridRef.current.deselectAllRows();\n\t\t\tsetState({ selected: !state.selected });\n\t\t\t}}\n\t>\n\t\tSelect/ Deselect\n\t</Button>\n\t<SimpleGrid\n\t\tref={gridRef}\n\t\tdata={censusData}\n\t\tmaxRows={10}\n\t\tonRowClick={row => {console.log(row)}}\n\t\tonRowSelect={rows => {console.log(rows)}}\n\t\trowSelectionType={SimpleGrid.rowSelectionOptions.multi}\n\t>\n\t\t<GridColumn displayName="Name" fieldName="value" defaultSort={GridColumn.sortOptions.ascending} showCheckbox />\n\t\t<GridColumn displayName="Population" fieldName="population" isRightAligned />\n\t\t<GridColumn displayName="Net Population Change" fieldName="populationChange" isRightAligned />\n\t\t<GridColumn displayName="Births" fieldName="births" isRightAligned width={100} isLargeViewportOnly />\n\t\t<GridColumn displayName="Deaths" fieldName="deaths" isRightAligned width={100} isSortable={false} isLargeViewportOnly/>\n\t</SimpleGrid>\n</div>\n```\n\n### Editable Fields\n\nAlso supported by Paginated and TreeGrid.\n\n```react\nshowSource: true\nstate: { selected: false }\n---\n<div>\n\t<SimpleGrid\n\t\tdata={censusData}\n\t\tmaxRows={10}\n\t\tonRowDataChange={newData => console.log(newData)}\n\t>\n\t\t<GridColumn displayName="Name" fieldName="value" defaultSort={GridColumn.sortOptions.ascending} />\n\t\t<GridColumn displayName="Population" fieldName="population" isEditable />\n\t\t<GridColumn displayName="Net Population Change" fieldName="populationChange" isEditable editorComponent={IncrementButton} />\n\t\t<GridColumn displayName="Births" fieldName="births" width={100} isLargeViewportOnly />\n\t\t<GridColumn displayName="Deaths" fieldName="deaths" width={100} isSortable={false} isLargeViewportOnly/>\n\t</SimpleGrid>\n</div>\n```\n\n```code\nlang: js\n---\nimport { useCellEditor } from \'@faithlife/styled-ui/grid\';\n\nconst IncrementButton = React.forwardRef(({ value }, ref) => {\n\tconst [count, setCount] = useState(value);\n\tuseCellEditor(ref, count, true);\n\n\treturn (\n\t\t<Button\n\t\t\tvariant="primaryOutline"\n\t\t\tsize="medium"\n\t\t\tonClick={() => setCount(c => c + 1)}\n\t\t>{`${count} +`}</Button>\n\t);\n});\n```\n'}});
//# sourceMappingURL=44.bb6da984.chunk.js.map