webpackJsonp([17],{2171:function(t,e,n){var o=n(0),a=n(94),r=n(460).PageRenderer;r.__esModule&&(r=r.default);var p=a({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:n(2246)}},componentWillMount:function(){},render:function(){return o.createElement(r,Object.assign({},this.props,{content:this.state.content}))}});p.__catalog_loader__=!0,t.exports=p},2246:function(t,e){t.exports='## Popover\n\nonFocusAway should always be used according to the spec.\n\n```react\nshowSource: true\nstate: { isOpen: false }\n---\n<PopoverDemo>\n\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\n\t\t<PopoverReference>\n\t\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen: !state.isOpen })}>\n\t\t\t\tShow a Popover!\n\t\t\t</Button>\n\t\t</PopoverReference>\n\t\t<Popover isOpen={state.isOpen} placement="top">\n\t\t\tHello!\n\t\t</Popover>\n\t</PopoverManager>\n</PopoverDemo>\n```\n\n## PopoverBase\n\n```react\nshowSource: true\nstate: { isOpen: false }\n---\n<PopoverDemo>\n\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\n\t\t<PopoverReference>\n\t\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen: !state.isOpen })}>\n\t\t\t\tShow a Popover!\n\t\t\t</Button>\n\t\t</PopoverReference>\n\t\t<PopoverBase isOpen={state.isOpen} placement="top">\n\t\t\tNotice my lack of style!\n\t\t</PopoverBase>\n\t</PopoverManager>\n</PopoverDemo>\n```\n\n## Placement\n\n```react\nshowSource: true\nstate: { isOpen1: false, isOpen2: false, isOpen3: false, isOpen4: false }\n---\n<PopoverDemo>\n\t<PopoverManager onFocusAway={() => setState({ isOpen1: false })}>\n\t\t<PopoverReference>\n\t\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen1: !state.isOpen1 })}>\n\t\t\t\tShow a Popover!\n\t\t\t</Button>\n\t\t</PopoverReference>\n\t\t<Popover isOpen={state.isOpen1} placement="top">\n\t\t\tHello!\n\t\t</Popover>\n\t</PopoverManager>\n\t<PopoverManager onFocusAway={() => setState({ isOpen2: false })}>\n\t\t<PopoverReference>\n\t\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen2: !state.isOpen2 })}>\n\t\t\t\tShow a Popover!\n\t\t\t</Button>\n\t\t</PopoverReference>\n\t\t<Popover isOpen={state.isOpen2} placement="bottom">\n\t\t\tHello!\n\t\t</Popover>\n\t</PopoverManager>\n\t<PopoverManager onFocusAway={() => setState({ isOpen3: false })}>\n\t\t<PopoverReference>\n\t\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen3: !state.isOpen3 })}>\n\t\t\t\tShow a Popover!\n\t\t\t</Button>\n\t\t</PopoverReference>\n\t\t<Popover isOpen={state.isOpen3} placement="left">\n\t\t\tHello!\n\t\t</Popover>\n\t</PopoverManager>\n\t<PopoverManager onFocusAway={() => setState({ isOpen4: false })}>\n\t\t<PopoverReference>\n\t\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen4: !state.isOpen4 })}>\n\t\t\t\tShow a Popover!\n\t\t\t</Button>\n\t\t</PopoverReference>\n\t\t<Popover isOpen={state.isOpen4} placement="right">\n\t\t\tHello!\n\t\t</Popover>\n\t</PopoverManager>\n</PopoverDemo>\n```\n\n## Options\n\n```react\nshowSource: true\nstate: { isOpen1: false, isOpen2: false, isOpen3: false, isOpen4: false }\n---\n<PopoverDemo>\n\t<PopoverManager onFocusAway={() => setState({ isOpen1: false })}>\n\t\t<PopoverReference>\n\t\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen1: !state.isOpen1 })}>\n\t\t\t\tShow a Popover!\n\t\t\t</Button>\n\t\t</PopoverReference>\n\t\t<Popover isOpen={state.isOpen1} placement="top" theme={{ backgroundColor: \'#ebf7ff\' }}>\n\t\t\tHello!\n\t\t</Popover>\n\t</PopoverManager>\n\t<PopoverManager onFocusAway={() => setState({ isOpen2: false })}>\n\t\t<PopoverReference>\n\t\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen2: !state.isOpen2 })}>\n\t\t\t\tShow a Popover with zIndex!\n\t\t\t</Button>\n\t\t</PopoverReference>\n\t\t<Popover\n\t\t\tisOpen={state.isOpen2}\n\t\t\tplacement="top"\n\t\t\tstyleOverrides={{\n\t\t\t\tpadding: \'18px\',\n\t\t\t\thideShadow: true,\n\t\t\t\twidth: \'200px\',\n\t\t\t\tborder: \'black solid 1px\',\n\t\t\t\tzIndex: 10,\n\t\t\t}}\n\t\t>\n\t\t\tHello!\n\t\t</Popover>\n\t</PopoverManager>\n\t<PopoverManager onFocusAway={() => setState({ isOpen3: false })}>\n\t\t<PopoverReference>\n\t\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen3: !state.isOpen3 })}>\n\t\t\t\tShow a Popover!\n\t\t\t</Button>\n\t\t</PopoverReference>\n\t\t<Popover isOpen={state.isOpen3} placement="top" hideArrow>\n\t\t\tHello!\n\t\t</Popover>\n\t</PopoverManager>\n\t<PopoverManager onFocusAway={() => setState({ isOpen4: false })}>\n\t\t<PopoverReference>\n\t\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen4: !state.isOpen4 })}>\n\t\t\t\tShow a Popover w/ a delay!\n\t\t\t</Button>\n\t\t</PopoverReference>\n\t\t<Popover isOpen={state.isOpen4} placement="top" delay={{ show: 1000, hide: 1000 }}>\n\t\t\tHello!\n\t\t</Popover>\n\t</PopoverManager>\n</PopoverDemo>\n```\n\n## Using container prop\n\n```react\nshowSource: true\nstate: { isOpen1: false, isOpen2: false }\n---\n// overflow: hidden\n<PopoverOverflowDemo>\n\t<PopoverManager onFocusAway={() => setState({ isOpen1: false })}>\n\t\t<PopoverReference>\n\t\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen1: !state.isOpen1 })}>\n\t\t\t\tShow a Popover!\n\t\t\t</Button>\n\t\t</PopoverReference>\n\t\t<Popover isOpen={state.isOpen1} placement="top">\n\t\t\tI\'m inline\n\t\t</Popover>\n\t</PopoverManager>\n\t<PopoverManager onFocusAway={() => setState({ isOpen2: false })}>\n\t\t<PopoverReference>\n\t\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen2: !state.isOpen2 })}>\n\t\t\t\tShow a Popover!\n\t\t\t</Button>\n\t\t</PopoverReference>\n\t\t<Popover isOpen={state.isOpen2} placement="top" container="body">\n\t\t\tI\'m thinking with portals!\n\t\t</Popover>\n\t</PopoverManager>\n</PopoverOverflowDemo>\n```\n\n## Tooltip\n\nAll props for normal popovers are available to tooltips.\nTooltips will be hidden on mobile.\n\n```react\nshowSource: true\nstate: { isOpen: false }\n---\n<PopoverDemo>\n\t<Tooltip content="Hello!">\n\t\t<Button variant="primary" size="medium">\n\t\t\tUncontrolled Tooltip\n\t\t</Button>\n\t</Tooltip>\n\n\t<Tooltip content="Hello!" isOpen={state.isOpen}>\n\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen: !state.isOpen })}>\n\t\t\tControlled Tooltip\n\t\t</Button>\n\t</Tooltip>\n\n\t<Tooltip content={<StyledDiv>Hello!</StyledDiv>}>\n\t\t<Button variant="primary" size="medium">\n\t\t\tTooltip with jsx\n\t\t</Button>\n\t</Tooltip>\n\n\t<Tooltip content={<StyledDiv>Hello!</StyledDiv>} toggleOnClick>\n\t\t<Button variant="primary" size="medium">\n\t\t\tTooltip that opens on tap\n\t\t</Button>\n\t</Tooltip>\n</PopoverDemo>\n```\n\n## Avoiding extra DOM elements\n\nBy default `PopoverReference` wraps its children in a container, which is used to attach event handlers. If you need to avoid the extra DOM element, you can pass a function child. The function receives a single argument containing an object of required props that must be spread onto a component in order for the popover to function. Both `Tooltip` and `PopoverReference` support this API.\n\n```react\nshowSource: true\nstate: { isOpen: false }\n---\n<PopoverDemo>\n\t<Tooltip content="Hello!">\n\t\t{tooltipProps => (\n\t\t\t<Button variant="primary" size="medium" {...tooltipProps}>\n\t\t\t\tUncontrolled Tooltip\n\t\t\t</Button>\n\t\t)}\n\t</Tooltip>\n</PopoverDemo>\n```\n'}});
//# sourceMappingURL=17.cd369c84.chunk.js.map