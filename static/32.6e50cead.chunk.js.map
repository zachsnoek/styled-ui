{"version":3,"sources":["webpack:///static/32.6e50cead.chunk.js","webpack:///./catalog/layout/stack.md?cc74","webpack:///./catalog/layout/stack.md"],"names":["webpackJsonp","2129","module","exports","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__","2204"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,EAASC,GCF7B,GAAIC,GAAQ,EAAQ,GAChBC,EAAmB,EAAQ,IAC3BC,EAAe,EAAQ,KAAWA,YAClCA,GAAaC,aACfD,EAAeA,EAAaE,QAE9B,IAAIC,GAAsBJ,GACxBK,YAAa,sBACbC,gBAAiB,WACf,OAAQC,QAAS,EAAQ,QAE3BC,mBAAoB,aAUpBC,OAAQ,WACN,MAAOV,GAAMW,cAAcT,EAAcU,OAAOC,UAAWC,KAAKC,OAAQP,QAASM,KAAKE,MAAMR,aAGhGH,GAAoBY,oBAAqB,EACzCpB,EAAOC,QAAUO,GDUfa,KACA,SAAUrB,EAAQC,GEtCxBD,EAAOC,QAAU","file":"static/32.6e50cead.chunk.js","sourcesContent":["webpackJsonp([32],{\n\n/***/ 2129:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(0);\n    var createReactClass = __webpack_require__(94);\n    var PageRenderer = __webpack_require__(460).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(2204)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!../../node_modules/raw-loader/index.js!./stack.md\", function() {\n            component.setState({\n              content: require(\"!!../../node_modules/raw-loader/index.js!./stack.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ }),\n\n/***/ 2204:\n/***/ (function(module, exports) {\n\nmodule.exports = \"`Stack` is a primitive layout component that can be used to evenly space vertically-stacked child elements. It behaves just like `Box`, but it also applies margins to direct children.\\n\\n### Example\\n\\n```react\\nshowSource: true\\n---\\n<Stack spacing={[4, 6]}>\\n\\t<Box height=\\\"100px\\\" bg=\\\"purple2\\\" />\\n\\t<Box height=\\\"120px\\\" bg=\\\"purple2\\\" />\\n\\t<Stack spacing={3}>\\n\\t\\t<Box height=\\\"100px\\\" bg=\\\"green2\\\" />\\n\\t\\t<Box height=\\\"100px\\\" bg=\\\"green2\\\" />\\n\\t</Stack>\\n\\t<Box height=\\\"80px\\\" bg=\\\"purple2\\\" />\\n</Stack>\\n```\\n\\n### Horizontal Stacks\\n\\nStyled-UI currently does not provide a horizontal stack. Because most UIs are width-constrained, horizontal stacks needs to address wrapping and flexing needs, which vary significantly. (The vertical `Stack` simply spaces out block elements with `margin`, allowing content to grow and overflow/scroll vertically as needed).\\n\\nThere are many ways to stack content horizontally. Here are some options, depending on your specific needs.\\n\\n#### Grid\\n\\nCSS grid can be a convenient way to space out stacks of elements because the built-in `gap` support means not having to mess with margins or other spacing mechanisms. Because grid is designed to lay out... grids... this isn't a good solution when you need to wrap variable-width elements onto additional lines.\\n\\n```react\\nshowSource: true\\n---\\n<Stack spacing={5}>\\n\\t<Paragraph>Evenly space out equally-sized elements that flex to fill available space</Paragraph>\\n\\t<Box display=\\\"grid\\\" gridAutoFlow=\\\"column\\\" gridGap={4}>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\" />\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\" />\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\" />\\n\\t</Box>\\n</Stack>\\n```\\n\\n```react\\nshowSource: true\\n---\\n<Stack spacing={5}>\\n\\t<Paragraph>Evenly space out elements that are sized based on content</Paragraph>\\n\\t<Box display=\\\"grid\\\" gridAutoFlow=\\\"column\\\" gridAutoColumns=\\\"max-content\\\" gridGap={4}>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\">Short content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\">This is some longer content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\">Boop.</Box>\\n\\t</Box>\\n</Stack>\\n```\\n\\n#### Flexbox\\n\\nAn easy to way to switch the flow of block elements from vertical to horizontal is to create a flexbox context. Flexbox doesn't help you out much with the spacing _between_ flex items, so you'll need to leverage something like `margin` if you need that.\\n\\n```react\\nshowSource: true\\n---\\n<Stack spacing={5}>\\n\\t<Paragraph>Stack block elements horizontally. This won't wrap, and if you run out of horizontal space, items will flex shrink by default.</Paragraph>\\n\\t<Box display=\\\"flex\\\">\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"blue2\\\">Short content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\">This is some longer content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"green2\\\">Boop.</Box>\\n\\t</Box>\\n</Stack>\\n```\\n\\n```react\\nshowSource: true\\n---\\n<Stack spacing={5}>\\n\\t<Paragraph>Stack block elements horizontally, but wrap when there's not enough horizontal space.</Paragraph>\\n\\t<Box display=\\\"flex\\\" flexWrap=\\\"wrap\\\" maxWidth=\\\"500px\\\">\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"blue2\\\">Short content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\">This is some longer content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"green2\\\">Boop.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"blue2\\\">Short content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\">This is some longer content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"green2\\\">Boop.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"blue2\\\">Short content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\">This is some longer content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"green2\\\">Boop.</Box>\\n\\t</Box>\\n</Stack>\\n```\\n\\n`margin` is a reasonable choice for applying spacing to elements in a flexbox context. You can follow the strategy used by `Stack` to create your own `HorizontalStack` with `spacing` prop that leverages theme data:\\n\\n```\\nconst HorizontalStack = styled(Box)`\\n\\tdisplay: flex;\\n\\n\\t> * + * {\\n\\t\\t${system({\\n\\t\\t\\tspacing: {\\n\\t\\t\\t\\tproperty: 'margin-left',\\n\\t\\t\\t\\tscale: 'space',\\n\\t\\t\\t},\\n\\t\\t})}\\n\\t}\\n`;\\n```\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/32.6e50cead.chunk.js","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!../../node_modules/raw-loader/index.js!./stack.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!../../node_modules/raw-loader/index.js!./stack.md\", function() {\n            component.setState({\n              content: require(\"!!../../node_modules/raw-loader/index.js!./stack.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./catalog/layout/stack.md\n// module id = 2129\n// module chunks = 32","module.exports = \"`Stack` is a primitive layout component that can be used to evenly space vertically-stacked child elements. It behaves just like `Box`, but it also applies margins to direct children.\\n\\n### Example\\n\\n```react\\nshowSource: true\\n---\\n<Stack spacing={[4, 6]}>\\n\\t<Box height=\\\"100px\\\" bg=\\\"purple2\\\" />\\n\\t<Box height=\\\"120px\\\" bg=\\\"purple2\\\" />\\n\\t<Stack spacing={3}>\\n\\t\\t<Box height=\\\"100px\\\" bg=\\\"green2\\\" />\\n\\t\\t<Box height=\\\"100px\\\" bg=\\\"green2\\\" />\\n\\t</Stack>\\n\\t<Box height=\\\"80px\\\" bg=\\\"purple2\\\" />\\n</Stack>\\n```\\n\\n### Horizontal Stacks\\n\\nStyled-UI currently does not provide a horizontal stack. Because most UIs are width-constrained, horizontal stacks needs to address wrapping and flexing needs, which vary significantly. (The vertical `Stack` simply spaces out block elements with `margin`, allowing content to grow and overflow/scroll vertically as needed).\\n\\nThere are many ways to stack content horizontally. Here are some options, depending on your specific needs.\\n\\n#### Grid\\n\\nCSS grid can be a convenient way to space out stacks of elements because the built-in `gap` support means not having to mess with margins or other spacing mechanisms. Because grid is designed to lay out... grids... this isn't a good solution when you need to wrap variable-width elements onto additional lines.\\n\\n```react\\nshowSource: true\\n---\\n<Stack spacing={5}>\\n\\t<Paragraph>Evenly space out equally-sized elements that flex to fill available space</Paragraph>\\n\\t<Box display=\\\"grid\\\" gridAutoFlow=\\\"column\\\" gridGap={4}>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\" />\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\" />\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\" />\\n\\t</Box>\\n</Stack>\\n```\\n\\n```react\\nshowSource: true\\n---\\n<Stack spacing={5}>\\n\\t<Paragraph>Evenly space out elements that are sized based on content</Paragraph>\\n\\t<Box display=\\\"grid\\\" gridAutoFlow=\\\"column\\\" gridAutoColumns=\\\"max-content\\\" gridGap={4}>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\">Short content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\">This is some longer content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\">Boop.</Box>\\n\\t</Box>\\n</Stack>\\n```\\n\\n#### Flexbox\\n\\nAn easy to way to switch the flow of block elements from vertical to horizontal is to create a flexbox context. Flexbox doesn't help you out much with the spacing _between_ flex items, so you'll need to leverage something like `margin` if you need that.\\n\\n```react\\nshowSource: true\\n---\\n<Stack spacing={5}>\\n\\t<Paragraph>Stack block elements horizontally. This won't wrap, and if you run out of horizontal space, items will flex shrink by default.</Paragraph>\\n\\t<Box display=\\\"flex\\\">\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"blue2\\\">Short content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\">This is some longer content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"green2\\\">Boop.</Box>\\n\\t</Box>\\n</Stack>\\n```\\n\\n```react\\nshowSource: true\\n---\\n<Stack spacing={5}>\\n\\t<Paragraph>Stack block elements horizontally, but wrap when there's not enough horizontal space.</Paragraph>\\n\\t<Box display=\\\"flex\\\" flexWrap=\\\"wrap\\\" maxWidth=\\\"500px\\\">\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"blue2\\\">Short content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\">This is some longer content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"green2\\\">Boop.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"blue2\\\">Short content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\">This is some longer content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"green2\\\">Boop.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"blue2\\\">Short content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"purple2\\\">This is some longer content.</Box>\\n\\t\\t<Box height=\\\"50px\\\" bg=\\\"green2\\\">Boop.</Box>\\n\\t</Box>\\n</Stack>\\n```\\n\\n`margin` is a reasonable choice for applying spacing to elements in a flexbox context. You can follow the strategy used by `Stack` to create your own `HorizontalStack` with `spacing` prop that leverages theme data:\\n\\n```\\nconst HorizontalStack = styled(Box)`\\n\\tdisplay: flex;\\n\\n\\t> * + * {\\n\\t\\t${system({\\n\\t\\t\\tspacing: {\\n\\t\\t\\t\\tproperty: 'margin-left',\\n\\t\\t\\t\\tscale: 'space',\\n\\t\\t\\t},\\n\\t\\t})}\\n\\t}\\n`;\\n```\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./catalog/layout/stack.md\n// module id = 2204\n// module chunks = 32"],"sourceRoot":""}