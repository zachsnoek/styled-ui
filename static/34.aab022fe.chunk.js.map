{"version":3,"sources":["webpack:///static/34.aab022fe.chunk.js","webpack:///./catalog/layout/Text.md?5bce","webpack:///./catalog/layout/Text.md"],"names":["webpackJsonp","2130","module","exports","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__","2205"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,EAASC,GCF7B,GAAIC,GAAQ,EAAQ,GAChBC,EAAmB,EAAQ,IAC3BC,EAAe,EAAQ,KAAWA,YAClCA,GAAaC,aACfD,EAAeA,EAAaE,QAE9B,IAAIC,GAAsBJ,GACxBK,YAAa,sBACbC,gBAAiB,WACf,OAAQC,QAAS,EAAQ,QAE3BC,mBAAoB,aAUpBC,OAAQ,WACN,MAAOV,GAAMW,cAAcT,EAAcU,OAAOC,UAAWC,KAAKC,OAAQP,QAASM,KAAKE,MAAMR,aAGhGH,GAAoBY,oBAAqB,EACzCpB,EAAOC,QAAUO,GDUfa,KACA,SAAUrB,EAAQC,GEtCxBD,EAAOC,QAAU","file":"static/34.aab022fe.chunk.js","sourcesContent":["webpackJsonp([34],{\n\n/***/ 2130:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(0);\n    var createReactClass = __webpack_require__(94);\n    var PageRenderer = __webpack_require__(460).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(2205)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!../../node_modules/raw-loader/index.js!./Text.md\", function() {\n            component.setState({\n              content: require(\"!!../../node_modules/raw-loader/index.js!./Text.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ }),\n\n/***/ 2205:\n/***/ (function(module, exports) {\n\nmodule.exports = \"`Text` is a primitive layout component that can be used to style text with a predefined typographical style and to customize typography-related styling. By default, it renders as a `span`. `Paragraph` is also available for block text, and has the same API as `Text`.\\n\\n### Example\\n\\n```react\\nshowSource: true\\n---\\n<Text textStyle=\\\"c.16\\\" whiteSpace=\\\"pre-wrap\\\">Text content using the <Text color=\\\"purple4\\\" fontWeight=\\\"semibold\\\">c.16</Text> text style.</Text>\\n```\\n\\n### Available text styles\\n\\n#### Headings\\n\\nUse for headlines.\\n\\n```react\\n<Stack spacing={3}>\\n\\t<ThemeList items={theme => theme.textStyles.h} render={([key, value]) => <Box  key={`h.${key}`}><Paragraph textStyle={`h.${key}`}>h.{key}</Paragraph></Box>} />\\n</Stack>\\n```\\n\\nThe `Heading` component is also available for convenience. It's a simple wrapper around `Parargaph`, rendering a `heading` element by default. Pass a `level` prop corresponding to the named `h.{level}` names listed above.\\n\\n```react\\nshowSource: true\\n---\\n<Heading level={18}>My Heading</Heading>\\n```\\n\\n#### Content\\n\\nUse for body copy and miscellaneous content.\\n\\n```react\\n<Stack spacing={3}>\\n\\t<ThemeList items={theme => theme.textStyles.c} render={([key, value]) => <Box  key={`c.${key}`}><Paragraph textStyle={`c.${key}`}>c.{key}</Paragraph></Box>} />\\n</Stack>\\n```\\n\\n#### UI\\n\\nUI components like buttons. Line heights always match the font size to simplify spacing.\\n\\n```react\\n<Stack spacing={3}>\\n\\t<ThemeList items={theme => theme.textStyles.ui} render={([key, value]) => <Box  key={`ui.${key}`}><Paragraph textStyle={`ui.${key}`}>ui.{key}</Paragraph></Box>} />\\n</Stack>\\n```\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/34.aab022fe.chunk.js","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!../../node_modules/raw-loader/index.js!./Text.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!../../node_modules/raw-loader/index.js!./Text.md\", function() {\n            component.setState({\n              content: require(\"!!../../node_modules/raw-loader/index.js!./Text.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./catalog/layout/Text.md\n// module id = 2130\n// module chunks = 34","module.exports = \"`Text` is a primitive layout component that can be used to style text with a predefined typographical style and to customize typography-related styling. By default, it renders as a `span`. `Paragraph` is also available for block text, and has the same API as `Text`.\\n\\n### Example\\n\\n```react\\nshowSource: true\\n---\\n<Text textStyle=\\\"c.16\\\" whiteSpace=\\\"pre-wrap\\\">Text content using the <Text color=\\\"purple4\\\" fontWeight=\\\"semibold\\\">c.16</Text> text style.</Text>\\n```\\n\\n### Available text styles\\n\\n#### Headings\\n\\nUse for headlines.\\n\\n```react\\n<Stack spacing={3}>\\n\\t<ThemeList items={theme => theme.textStyles.h} render={([key, value]) => <Box  key={`h.${key}`}><Paragraph textStyle={`h.${key}`}>h.{key}</Paragraph></Box>} />\\n</Stack>\\n```\\n\\nThe `Heading` component is also available for convenience. It's a simple wrapper around `Parargaph`, rendering a `heading` element by default. Pass a `level` prop corresponding to the named `h.{level}` names listed above.\\n\\n```react\\nshowSource: true\\n---\\n<Heading level={18}>My Heading</Heading>\\n```\\n\\n#### Content\\n\\nUse for body copy and miscellaneous content.\\n\\n```react\\n<Stack spacing={3}>\\n\\t<ThemeList items={theme => theme.textStyles.c} render={([key, value]) => <Box  key={`c.${key}`}><Paragraph textStyle={`c.${key}`}>c.{key}</Paragraph></Box>} />\\n</Stack>\\n```\\n\\n#### UI\\n\\nUI components like buttons. Line heights always match the font size to simplify spacing.\\n\\n```react\\n<Stack spacing={3}>\\n\\t<ThemeList items={theme => theme.textStyles.ui} render={([key, value]) => <Box  key={`ui.${key}`}><Paragraph textStyle={`ui.${key}`}>ui.{key}</Paragraph></Box>} />\\n</Stack>\\n```\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./catalog/layout/Text.md\n// module id = 2205\n// module chunks = 34"],"sourceRoot":""}